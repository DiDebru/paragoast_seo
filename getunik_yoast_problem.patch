diff --git a/src/YoastSeoFieldManager.php b/src/YoastSeoFieldManager.php
index 894dc3b..9cd505c 100644
--- a/src/YoastSeoFieldManager.php
+++ b/src/YoastSeoFieldManager.php
@@ -3,6 +3,8 @@
 namespace Drupal\yoast_seo;
 
 use \Drupal\Component\Utility\NestedArray;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Form\FormStateInterface;
 
 /**
  * Class YoastSeoFieldManager.
@@ -48,8 +50,9 @@ class YoastSeoFieldManager {
   /**
    * Constructor for YoastSeoFieldManager.
    */
-  public function __construct() {
+  public function __construct(EntityFieldManager $field_manager) {
     $this->entity_manager = \Drupal::entityManager();
+    $this->field_manager = $field_manager;
   }
 
   /**
@@ -202,11 +205,13 @@ class YoastSeoFieldManager {
    * @return mixed
    *   Transformed form.
    */
-  public function setFieldsConfiguration($form_after_build) {
+  public function setFieldsConfiguration($form_after_build, FormStateInterface $form_state) {
     $yoast_settings = $form_after_build['#yoast_settings'];
     $body_field = isset($yoast_settings['body']) ? $yoast_settings['body'] : '';
     $body_element = FALSE;
-
+    $build_info = $form_state->getBuildInfo();
+    $form_entity = $build_info['callback_object'];
+    $entity = $form_entity->getEntity();
     if ($body_field && isset($form_after_build[$body_field]['widget'][0])) {
       $body_element = $form_after_build[$body_field]['widget'][0];
     }
@@ -282,6 +287,11 @@ class YoastSeoFieldManager {
     // Form config.
     $form_after_build['#attached']['drupalSettings']['yoast_seo']['form_id'] = $form_after_build['#id'];
 
+    $paragraph_fields = $this->filterTextFields($form_state);
+    foreach ($paragraph_fields as $paragraph_field_id => $paragraph_field) {
+      $paragraph_field_id = $paragraph_field->getName();
+      $form_after_build['#attached']['drupalSettings']['yoast_seo']['fields']['paragraph_fields'][] =  $paragraph_field_id;
+    }
     return $form_after_build;
   }
 
@@ -337,4 +347,77 @@ class YoastSeoFieldManager {
     return $form;
   }
 
+  /**
+   * @param $form_after_build
+   *    The form from YoastSeoFieldManager->setFieldsConfiguration().
+   * @param $form_state
+   *    The form_state from YoastSeoFieldManager->setFieldsConfiguration().
+   *
+   * @return array
+   *    Returns an array of text fields.
+   *
+   * A Function that filters Paragraph text fields out of a specific entity.
+   *
+   */
+  public function filterTextFields(FormStateInterface $form_state) {
+    // Attach Paragraph fields.
+    $build_info = $form_state->getBuildInfo();
+    $form_entity = $build_info['callback_object'];
+    $entity = $form_entity->getEntity();
+    $entity_type = $entity->getEntityTypeId();
+    $bundle = $entity->bundle();
+    $fields = $this->field_manager->getFieldDefinitions($entity_type, $bundle);
+    $paragraph_field_types = ['entity_reference_revisions'];
+    $extended_text_field_types = ['text_with_summary', 'text_long', 'text'];
+    $paragraph_text_fields = [];
+    $paragraph_fields = [];
+
+    foreach ($fields as $field_name => $field) {
+      // Check If $field is of type entity_reference_revisions.
+      if ($field->getType() == 'entity_reference_revisions') {
+        $field_settings = $field->getSettings();
+        $field_target_bundle = array_keys($field_settings['handler_settings']['target_bundles']);
+        // Get all fields from the paragraph bundle.
+        $paragraph_fields = $this->field_manager->getFieldDefinitions('paragraph', $field_target_bundle[0]);
+        $paragraph_text_fields[$field->id()] = $this->searchForEntityReferenceRevisionFields($paragraph_fields, $extended_text_field_types);
+      }
+    }
+
+    return $paragraph_text_fields;
+  }
+
+  /**
+   * @param $paragraph_field
+   *
+   * @return array
+   *    Array of Paragraph fields with reference revision.
+   */
+  public function getEntityReferenceRevisionFields($paragraph_field) {
+    $field_settings = $paragraph_field->getSettings();
+    $field_target_bundle = array_keys($field_settings['handler_settings']['target_bundles']);
+    $paragraph_fields = $this->field_manager->getFieldDefinitions('paragraph', $field_target_bundle[0]);
+
+    return $paragraph_fields;
+  }
+
+  /**
+   * @param $paragraph_fields
+   * @param $field_types
+   *
+   * @return mixed
+   */
+  public function searchForEntityReferenceRevisionFields($paragraph_fields, $field_types) {
+    $paragraph_text_fields = [];
+    foreach ($paragraph_fields as $paragraph_field_name => $paragraph_field) {
+      if (in_array($paragraph_field->getType(), $field_types)) {
+        $paragraph_text_fields[$paragraph_field->id()] = $paragraph_field;
+      }
+      else if ($paragraph_field->getType() == 'entity_reference_revisions') {
+        $paragraph_fields = $this->getEntityReferenceRevisionFields($paragraph_field);
+        $this->searchForEntityReferenceRevisionFields($paragraph_fields, $field_types);
+      }
+    }
+    return $paragraph_text_fields;
+  }
+
 }
diff --git a/yoast_seo.module b/yoast_seo.module
index ac30d9b..088175c 100644
--- a/yoast_seo.module
+++ b/yoast_seo.module
@@ -39,7 +39,7 @@ function yoast_seo_form_node_afterbuild($form, FormStateInterface $form_state) {
     $yoast_seo_manager = \Drupal::service('yoast_seo.manager');
     $yoast_seo_field_manager = \Drupal::service('yoast_seo.field_manager');
     $form = $yoast_seo_manager->setGeneralConfiguration($form);
-    $form = $yoast_seo_field_manager->setFieldsConfiguration($form);
+    $form = $yoast_seo_field_manager->setFieldsConfiguration($form, $form_state);
     $form = $yoast_seo_manager->setTargetsConfiguration($form);
     $form = $yoast_seo_manager->setScoreToStatusRulesConfiguration($form);
     $form = $yoast_seo_field_manager->addSnippetEditorMarkup($form);
diff --git a/yoast_seo.services.yml b/yoast_seo.services.yml
index 9b4294e..8448c1d 100644
--- a/yoast_seo.services.yml
+++ b/yoast_seo.services.yml
@@ -4,4 +4,4 @@ services:
     arguments: ['@module_handler']
   yoast_seo.field_manager:
     class: Drupal\yoast_seo\YoastSeoFieldManager
-    arguments: []
+    arguments: ['@entity_field.manager']
